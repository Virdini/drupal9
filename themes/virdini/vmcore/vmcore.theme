<?php

/**
 * Implements hook_preprocess_HOOK() for html templates.
 */
function vmcore_preprocess_html(&$variables) {
  $route = \Drupal::routeMatch();
  switch ($route->getRouteName()) {
    case 'entity.taxonomy_term.canonical':
      $variables['attributes']['class'][] = 'voc-'. $route->getParameter('taxonomy_term')->bundle();
      break;
  }
}

/**
 * Implements hook_preprocess_HOOK() for node templates.
 */
function vmcore_preprocess_node(&$variables) {
  unset($variables['attributes']['role']);
}

/**
 * Implements hook_preprocess_HOOK() for block templates.
 */
function vmcore_preprocess_block(&$variables) {
  switch ($variables['base_plugin_id']) {
    case 'system_branding_block':
      $variables['front'] = \Drupal::service('path.matcher')->isFrontPage() ? FALSE : '<front>';
      $variables['#cache']['contexts'][] = 'url.path.is_front';
      break;
  }
}

/**
 * Implements hook_element_info_alter().
 */
function vmcore_element_info_alter(&$type) {
  if (isset($type['page']['#theme_wrappers']['off_canvas_page_wrapper'])) {
    unset($type['page']['#theme_wrappers']['off_canvas_page_wrapper']);
  }
}

/**
 * Implements hook_preprocess_HOOK() for pager templates.
 */
function vmcore_preprocess_pager(&$variables) {
  $pager_manager = \Drupal::service('pager.manager');
  if ($pager = $pager_manager->getPager($variables['pager']['#element'])) {
    $variables['pager_max'] = $pager->getTotalPages();
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for page templates.
 */
function vmcore_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  $route_match = \Drupal::routeMatch();
  switch (\Drupal::routeMatch()->getRouteName()) {
    case 'vamp.entity.node.canonical':
    case 'entity.node.canonical':
      $suggestions[] = $variables['theme_hook_original'] .'__node__canonical';
      break;
    case 'vamp.entity.user.canonical':
    case 'entity.user.canonical':
      $suggestions[] = $variables['theme_hook_original'] .'__user__canonical';
      break;
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for responsive_image templates.
 */
function vmcore_theme_suggestions_responsive_image_alter(array &$suggestions, array $variables) {
  if (isset($variables['responsive_image_style_id'])) {
    $suggestions[] = $variables['theme_hook_original'] .'__'. $variables['responsive_image_style_id'];
  }
}

/**
 * Implements hook_library_info_alter().
 */
function vmcore_library_info_alter(&$libraries, $extension) {
  switch ($extension) {
    case 'vbase':
      $libraries['youtube']['css']['component']['css/youtube.css']['vcrit'] = TRUE;
      break;
    case 'core':
      $libraries['normalize']['css']['base']['assets/vendor/normalize-css/normalize.css']['vcrit'] = TRUE;
      break;
    case 'system':
      foreach ($libraries['base']['css']['component'] as &$settings) {
        $settings['vcrit'] = TRUE;
      }
      break;
    case 'toolbar':
      $libraries['toolbar']['css']['component']['css/toolbar.module.css']['vcrit'] = TRUE;
      $libraries['toolbar']['css']['theme']['css/toolbar.theme.css']['vcrit'] = TRUE;
      $libraries['toolbar']['css']['theme']['css/toolbar.icons.theme.css']['vcrit'] = TRUE;
      $libraries['toolbar.menu']['css']['state']['css/toolbar.menu.css']['vcrit'] = TRUE;
      break;
    case 'responsive_tables_filter':
      $libraries['tablesaw-filter']['css']['theme']['css/tablesaw.stackonly.css']['vcrit'] = TRUE;
      break;
  }
}

/**
 * Implements hook_form_BASE_FORM_ID_alter() for \Drupal\node\NodeForm.
 */
function vmcore_form_node_form_alter(&$form) {
  $form['meta']['changed']['#wrapper_attributes']['class'][] = 'container-inline';
  $form['meta']['author']['#wrapper_attributes']['class'][] = 'container-inline';
}

/**
 * Implements hook_preprocess_HOOK() for hook: 'input__submit'.
 */
function vmcore_preprocess_input__submit(&$variables) {
  $variables['attributes']['class'][] = 'notranslate';
  $variables['attributes']['translate'] = 'no';
}
